<?php


namespace Tests\Unit\Repository;


use App\Repository\GroupRepository;
use Illuminate\Support\Collection;

class GroupRepositoryTest extends \TestCase
{
    /**
     * @var mixed
     */
    private $flights;
    private $repository;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $jsonPath = realpath(base_path('tests/flights.json'));
        $this->flights = json_decode(file_get_contents(realpath($jsonPath)), true);
        $this->repository = new GroupRepository();
    }

    public function test_group_flights(){
        $example = [
            [
                'id' => '1',
                'fare' => '1AF',
                'price' => 100,
                'outbound' => 1,
                'inbound' => 0,
            ],
            [
                'id' => '2',
                'fare' => '1AF',
                'price' => 200,
                'outbound' => 0,
                'inbound' => 1,
            ],
            [
                'id' => '3',
                'fare' => '1AF',
                'price' => 100,
                'outbound' => 1,
                'inbound' => 0,
            ],
            [
                'id' => '4',
                'fare' => '1AF',
                'price' => 250,
                'outbound' => 0,
                'inbound' => 1,
            ],
            [
                'id' => '5',
                'fare' => '2DA',
                'price' => 500,
                'outbound' => 1,
                'inbound' => 0,
            ],
            [
                'id' => '6',
                'fare' => '2DA',
                'price' => 800,
                'outbound' => 0,
                'inbound' => 1,
            ],
        ];

        $expected = [
            [
                'totalPrice' => 300,
                'outbound' =>[['id' => 1], ['id' => 3]],
                'inbound' =>[['id' => 2]],
            ],
            [
                'totalPrice' => 350,
                'outbound' =>[['id' => 1], ['id' => 3]],
                'inbound' =>[['id' => 4]],
            ],
            [
                'totalPrice' => 1300,
                'outbound' =>[['id' => 5]],
                'inbound' =>[['id' => 6]],
            ],
        ];

        $actual = $this->repository->groups(collect($example))->all();
        $this->assertSameSize($expected, $actual);


        foreach ($actual as $key => $item){
            $this->assertEquals($expected[$key]['totalPrice'], $item['totalPrice']);
            $this->assertSameSize($expected[$key]['outbound'], $item['outbound']->all());
            $this->assertSameSize($expected[$key]['inbound'], $item['inbound']->all());
        }
    }

    public function test_calculate_total_price_is_float(){
        $value = $this->repository->calculateTotalPrice($this->flights);
        $this->assertIsFloat($value);
    }

    public function test_filter_flights_by_outbound(){
        $filter = $this->repository->filterFlightsByOutbound($this->flights);
        $this->assertInstanceOf(Collection::class, $filter);
        $this->assertEmpty($filter->where('inbound','=' ,1)->all());
        $this->assertNotEmpty($filter->where('outbound', '=',1)->all());

        $first = $filter->toArray()[0];
        $this->assertArrayHasKey('id', $first);;
        $this->assertArrayHasKey('fare', $first);;
        $this->assertArrayHasKey('price', $first);
        $this->assertArrayHasKey('outbound', $first);
        $this->assertArrayHasKey('inbound', $first);

    }

    public function test_filter_flights_by_inbound(){
        $filter = $this->repository->filterFlightsByInbound($this->flights);
        $this->assertInstanceOf(Collection::class, $filter);
        $this->assertEmpty($filter->where('outbound', 1)->all());
        $this->assertNotEmpty($filter->where('inbound', 1)->all());


        $first = $filter->toArray()[0];
        $this->assertArrayHasKey('id', $first);;
        $this->assertArrayHasKey('fare', $first);;
        $this->assertArrayHasKey('price', $first);
        $this->assertArrayHasKey('outbound', $first);
        $this->assertArrayHasKey('inbound', $first);
    }
}
